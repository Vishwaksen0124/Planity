openapi: 3.0.3
info:
  title: Task Management API
  description: API for managing tasks, subtasks, and notifications.
  version: 1.0.0
servers:
  - url: https://planity-4l0m.onrender.com
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        title:
          type: string
        role:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        createdAt:
          type: string
          format: date-time
    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        team:
          type: array
          items:
            $ref: '#/components/schemas/User'
        stage:
          type: string
        date:
          type: string
          format: date
        priority:
          type: string
        assets:
          type: array
          items:
            type: string
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
        subTasks:
          type: array
          items:
            $ref: '#/components/schemas/SubTask'
        isTrashed:
          type: boolean
    SubTask:
      type: object
      properties:
        title:
          type: string
        date:
          type: string
          format: date
        tag:
          type: string
    Activity:
      type: object
      properties:
        type:
          type: string
        activity:
          type: string
        by:
          $ref: '#/components/schemas/User'
    Notice:
      type: object
      properties:
        team:
          type: array
          items:
            $ref: '#/components/schemas/User'
        text:
          type: string
        task:
          type: string
paths:
  /api/users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                isAdmin:
                  type: boolean
                role:
                  type: string
                title:
                  type: string
      responses:
        201:
          description: User created successfully
        400:
          description: User already exists or invalid data

  /api/users/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials

  /api/users/logout:
    get:
      summary: Logout user
      responses:
        200:
          description: Logout successful

  /api/users/get-team:
    get:
      summary: Get team list
      responses:
        200:
          description: List of users

  /api/users/notifications:
    get:
      summary: Get user notifications
      responses:
        201:
          description: List of notifications

  /api/users/profile:
    patch:
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                title:
                  type: string
      responses:
        200:
          description: Profile updated successfully

  /api/users/mark-notification:
    patch:
      summary: Mark notification as read
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      responses:
        200:
          description: Notification marked as read

  /api/users/change-password:
    patch:
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        201:
          description: Password changed successfully

  /api/users/{id}:
    delete:
      summary: Delete user profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully

  /api/tasks/create:
    post:
      summary: Create a new task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                team:
                  type: array
                  items:
                    type: string
                stage:
                  type: string
                date:
                  type: string
                  format: date
                priority:
                  type: string
                assets:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /api/tasks/duplicate/{id}:
    post:
      summary: Duplicate a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task duplicated successfully

  /api/tasks/activity/{id}:
    post:
      summary: Post an activity to a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                activity:
                  type: string
      responses:
        '200':
          description: Activity posted successfully

  /api/task/dashboard:
    get:
      summary: Get dashboard statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved successfully

  /api/tasks:
    get:
      summary: Get tasks
      security:
        - bearerAuth: []
      parameters:
        - name: stage
          in: query
          schema:
            type: string
        - name: isTrashed
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Tasks retrieved successfully

  /api/tasks/{id}:
    get:
      summary: Get a task by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task retrieved successfully
    
    put:
      summary: Trash a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task trashed successfully

  /api/tasks/update/{id}:
    put:
      summary: Update a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                team:
                  type: array
                  items:
                    type: string
                stage:
                  type: string
                date:
                  type: string
                  format: date
                priority:
                  type: string
                assets:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Task updated successfully

  /api/tasks/create-subtask/{id}:
    post:
      summary: Create a subtask
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                tag:
                  type: string
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: SubTask added successfully

  # /api/tasks/{id}:
  #   put:
  #     summary: Trash a task
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: Task trashed successfully

  /api/tasks/delete-restore/{id}:
    post:
      summary: Delete or restore a task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: actionType
          in: query
          required: true
          schema:
            type: string
            enum: [delete, deleteAll, restore, restoreAll]
      responses:
        '200':
          description: Operation performed successfully
